const createCsvWriter = require('csv-writer').createObjectCsvWriter;
const path = require('path');

// Definimos la estructura del archivo CSV para las comidas
const csvWriter = createCsvWriter({
    path: path.join(__dirname, 'comidas.csv'),
    header: [
        {id: 'nombre_platillo', title: 'NOMBRE_PLATILLO'},
        {id: 'calorias', title: 'CALORIAS'},
        {id: 'proteinas', title: 'PROTEINAS'},
        {id: 'carbohidratos', title: 'CARBOHIDRATOS'},
        {id: 'grasas', title: 'GRASAS'},
        {id: 'tipo_dieta', title: 'TIPO_DIETA'},
        {id: 'restricciones_alimentarias', title: 'RESTRICCIONES_ALIMENTARIAS'},
        {id: 'nivel_actividad_recomendado', title: 'NIVEL_ACTIVIDAD_RECOMENDADO'},
        {id: 'condicion_medica_recomendada', title: 'CONDICION_MEDICA_RECOMENDADA'},
        {id: 'objetivos_nutricionales_recomendados', title: 'OBJETIVOS_NUTRICIONALES_RECOMENDADOS'}
    ]
});

// Generación de datos ficticios de comidas
const comidasData = Array.from({ length: 50 }, () => ({
    nombre_platillo: ['Ensalada Vegana', 'Salmón a la Parrilla', 'Pollo al Curry', 'Tacos Vegetarianos'][Math.floor(Math.random() * 4)],
    calorias: (Math.random() * (800 - 300) + 300).toFixed(1),  // Calorías entre 300 y 800
    proteinas: (Math.random() * (50 - 10) + 10).toFixed(1),  // Proteínas entre 10g y 50g
    carbohidratos: (Math.random() * (100 - 30) + 30).toFixed(1),  // Carbohidratos entre 30g y 100g
    grasas: (Math.random() * (40 - 10) + 10).toFixed(1),  // Grasas entre 10g y 40g
    tipo_dieta: ['Vegano', 'Vegetariano', 'Omnívoro'][Math.floor(Math.random() * 3)],
    restricciones_alimentarias: ['Sin gluten', 'Sin lactosa', 'Ninguna'][Math.floor(Math.random() * 3)],
    nivel_actividad_recomendado: ['Sedentario', 'Moderado', 'Muy activo'][Math.floor(Math.random() * 3)],
    condicion_medica_recomendada: ['Diabetes', 'Hipertensión', 'Ninguna'][Math.floor(Math.random() * 3)],
    objetivos_nutricionales_recomendados: ['Pérdida de peso', 'Ganancia muscular', 'Mantener peso'][Math.floor(Math.random() * 3)]
}));

// Escritura del CSV
csvWriter.writeRecords(comidasData)
    .then(() => {
        console.log('El archivo CSV de comidas fue creado exitosamente y guardado en el directorio backend.');
    })
    .catch(err => {
        console.error('Hubo un error al escribir el archivo CSV de comidas:', err);
    });
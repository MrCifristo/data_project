services:
  db:
    image: postgres:15
    container_name: nutriwizard-db
    restart: always
    ports:
      - '5433:5432' # Mapea el puerto externo 5433 al puerto interno 5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: NutriWizard

  redis:
    image: redis:latest
    container_name: nutriwizard-redis
    restart: always
    ports:
      - "6379:6379" # Mapea el puerto 6379 para Redis
    volumes:
      - redis_data:/data # Persistencia de datos de Redis
    command: ["redis-server", "--save", "60", "1", "--loglevel", "verbose"] # Configuración básica

  backend:
    build: ./backend
    container_name: nutriwizard-backend
    restart: always
    ports:
      - "5001:5001" # Mapea el puerto 5001 para el backend
    environment:
      DB_NAME: NutriWizard
      DB_USER: test
      DB_PASSWORD: test
      DB_HOST: db # Conecta al servicio db
      DB_PORT: 5432
      DB_DIALECT: postgres
      JWT_SECRET: diQ5Wsu7HMk/JKSl7jcu/w0GJ79OXmIsyoZS4zWqatQ=
      PORT: 5001
      REDIS_HOST: redis # Conecta al servicio Redis
      REDIS_PORT: 6379
    volumes:
      - ./backend:/app
      - /app/node_modules
    working_dir: /app
    command: npm run dev
    depends_on:
      - db # Asegura que db se inicie antes del backend
      - redis # Asegura que Redis se inicie antes del backend

  frontend:
    build: ./frontend
    container_name: nutriwizard-frontend
    restart: always
    ports:
      - "3000:3000" # Mapea el puerto 3000 para el frontend
    environment:
      CHOKIDAR_USEPOLLING: true
      HOST: 0.0.0.0
      PORT: 3000
      NEXT_PUBLIC_API_URL: http://localhost:5001 # URL del backend
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
    working_dir: /usr/src/app
    command: npm start
    stdin_open: true
    tty: true
    depends_on:
      - backend # Asegura que backend se inicie antes del frontend

volumes:
  postgres_data:
  redis_data:
